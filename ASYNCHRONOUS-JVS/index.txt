Asynchronous Jvs => this talks about ;
Set Interval () :- allows to execute a chunk of code every time a specified amount of milli second passes.

SetTimeout() :- is a function that allows to wait a certain amount of time before executing a chunk of code, do note that outside of timeout will continue execution as normal.

//SYNCHRONOUS-JVS => is the one which the code is executed line by line & there task are completed instantly.


//CALL-BACK
A callback is a function passed as an argument to another function
This technique allows a function to call another function
A callback function can run after another function has finished

//API => Application Programming Interface
When to Use a Callback?
The examples above are not very exciting.

They are simplified to teach you the callback syntax.
Where callbacks really shine are in asynchronous functions, 
where one function has to wait for another function 
(like waiting for a file to load).

Callback Hell
The phenomenon which happens when we nest multiple callbacks within a function is called a callback hell.
 The shape of the resulting code structure resembles a pyramid and hence callback hell is also called the “pyramid of the doom”. 
 It makes the code very difficult to understand and maintain.

 The callback hell in JavaScript is referred to as a situation where an excessive amount of nested callback functions are being executed. 
 It reduces code readability and maintenance.


 fetchUserTwo("Michael", (user) => {...}): initiates the process by fetching a user with the username "Michael”.

fetchUserPhotos(user.username, (userPhotos) => {...}): Upon receiving the user data, this function fetches the photos associated with the user.

fetchUserPhotoDetails(userPhotos[0], (details) => {...}): This fetches the details of the first photo retrieved.

The next three lines are repeatedly written to fetch details of the first photo (userPhotos[0]) multiple times.

console.log(details) outputs the details of the first photo to the console.


Method	Description
abs(x)	Returns the absolute value of x
acos(x)	Returns the arccosine of x, in radians
acosh(x)	Returns the hyperbolic arccosine of x
asin(x)	Returns the arcsine of x, in radians
asinh(x)	Returns the hyperbolic arcsine of x
atan(x)	Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)	Returns the arctangent of the quotient of its arguments
atanh(x)	Returns the hyperbolic arctangent of x
cbrt(x)	Returns the cubic root of x
ceil(x)	Returns x, rounded upwards to the nearest integer
cos(x)	Returns the cosine of x (x is in radians)
cosh(x)	Returns the hyperbolic cosine of x
exp(x)	Returns the value of Ex
floor(x)	Returns x, rounded downwards to the nearest integer
log(x)	Returns the natural logarithm (base E) of x
max(x, y, z, ..., n)	Returns the number with the highest value
min(x, y, z, ..., n)	Returns the number with the lowest value
pow(x, y)	Returns the value of x to the power of y
random()	Returns a random number between 0 and 1
round(x)	Rounds x to the nearest integer
sign(x)	Returns if x is negative, null or positive (-1, 0, 1)
sin(x)	Returns the sine of x (x is in radians)
sinh(x)	Returns the hyperbolic sine of x
sqrt(x)	Returns the square root of x
tan(x)	Returns the tangent of an angle
tanh(x)	Returns the hyperbolic tangent of a number
trunc(x)	Returns the integer part of a number (x)